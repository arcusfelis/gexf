%% HRL file generated by ERLSOM
%%
%% It is possible to change the name of the record fields.
%%
%% It is possible to add default values, but be aware that these will
%% only be used when *writing* an xml document.




-record('_document-attribute', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	id,
	%% This attribute is required.
	title,
	%% This attribute is required.
	type,
	choice :: ['attribute-content-default'() | 'attribute-content-options'()] | undefined}).

-type '_document-attribute'() :: #'_document-attribute'{}.


-record('_document-attributes', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	class,
	%% This attribute is optional.
	mode,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% Choice (xs:sequence).
	attribute :: ['attribute-content'()] | undefined}).

-type '_document-attributes'() :: #'_document-attributes'{}.


-record('_document-attvalue', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	for,
	%% This attribute is required.
	value,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen}).

-type '_document-attvalue'() :: #'_document-attvalue'{}.


-record('_document-attvalues', {anyAttribs :: proplist:proplist() | undefined,
	%% Choice (xs:sequence).
	attvalue :: [attvalue()] | undefined}).

-type '_document-attvalues'() :: #'_document-attvalues'{}.


-record('_document-color', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	r,
	%% This attribute is required.
	g,
	%% This attribute is required.
	b,
	%% This attribute is optional.
	a,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% Choice (xs:sequence).
	spells :: ['spells-content'()] | undefined}).

-type '_document-color'() :: #'_document-color'{}.


-record('_document-edge', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% This attribute is required.
	id,
	%% This attribute is optional.
	type,
	%% This attribute is optional.
	label,
	%% This attribute is required.
	source,
	%% This attribute is required.
	target,
	%% This attribute is optional.
	weight,
	choice :: ['attvalues-content'() | 'edge-content/CH4'() | 'spells-content'()] | undefined}).

-type '_document-edge'() :: #'_document-edge'{}.


-record('_document-edges', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	count,
	%% Choice (xs:sequence).
	edge :: ['edge-content'()] | undefined}).

-type '_document-edges'() :: #'_document-edges'{}.


-record('_document-gexf', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	version,
	%% This attribute is optional.
	variant,
	%% Choice (xs:sequence).
	meta :: ['meta-content'()] | undefined,
	%% Choice (xs:sequence).
	graph :: ['graph-content'()] | undefined}).

-type '_document-gexf'() :: #'_document-gexf'{}.


-record('_document-graph', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	timeformat,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% This attribute is optional.
	defaultedgetype,
	%% This attribute is optional.
	idtype,
	%% This attribute is optional.
	mode,
	choice :: ['attributes-content'() | 'graph-content/CH1'()] | undefined}).

-type '_document-graph'() :: #'_document-graph'{}.


-record('_document-meta', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	lastmodifieddate,
	choice :: ['meta-content-creator'() | 'meta-content-description'() | 'meta-content-keywords'()] | undefined}).

-type '_document-meta'() :: #'_document-meta'{}.


-record('_document-node', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% This attribute is optional.
	pid,
	%% This attribute is required.
	id,
	%% This attribute is optional.
	label,
	choice :: ['attvalues-content'() | 'node-content/CH2'() | 'node-content/CH3'() | 'parents-content'() | 'spells-content'()] | undefined}).

-type '_document-node'() :: #'_document-node'{}.


-record('_document-nodes', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	count,
	%% Choice (xs:sequence).
	node :: ['node-content'()] | undefined}).

-type '_document-nodes'() :: #'_document-nodes'{}.


-record('_document-parent', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	for}).

-type '_document-parent'() :: #'_document-parent'{}.


-record('_document-parents', {anyAttribs :: proplist:proplist() | undefined,
	%% Choice (xs:sequence).
	parent :: [parent()] | undefined}).

-type '_document-parents'() :: #'_document-parents'{}.


-record('_document-position', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	x,
	%% This attribute is required.
	y,
	%% This attribute is required.
	z,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% Choice (xs:sequence).
	spells :: ['spells-content'()] | undefined}).

-type '_document-position'() :: #'_document-position'{}.


-record('_document-size', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	value,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% Choice (xs:sequence).
	spells :: ['spells-content'()] | undefined}).

-type '_document-size'() :: #'_document-size'{}.


-record('_document-spell', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen}).

-type '_document-spell'() :: #'_document-spell'{}.


-record('_document-spells', {anyAttribs :: proplist:proplist() | undefined,
	%% Choice (xs:sequence).
	spell :: [spell()] | undefined}).

-type '_document-spells'() :: #'_document-spells'{}.


-record('_document-thickness', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	value,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% Choice (xs:sequence).
	spells :: ['spells-content'()] | undefined}).

-type '_document-thickness'() :: #'_document-thickness'{}.


-record('attribute-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	id,
	%% This attribute is required.
	title,
	%% This attribute is required.
	type,
	choice :: ['attribute-content-default'() | 'attribute-content-options'()] | undefined}).

-type 'attribute-content'() :: #'attribute-content'{}.


-record('attribute-content-default', {anyAttribs :: proplist:proplist() | undefined,
	'default'}).

-type 'attribute-content-default'() :: #'attribute-content-default'{}.


-record('attribute-content-options', {anyAttribs :: proplist:proplist() | undefined,
	'options'}).

-type 'attribute-content-options'() :: #'attribute-content-options'{}.


-record('attributes-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	class,
	%% This attribute is optional.
	mode,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% Choice (xs:sequence).
	attribute :: ['attribute-content'()] | undefined}).

-type 'attributes-content'() :: #'attributes-content'{}.


-record(attvalue, {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	for,
	%% This attribute is required.
	value,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen}).

-type attvalue() :: #attvalue{}.


-record('attvalues-content', {anyAttribs :: proplist:proplist() | undefined,
	%% Choice (xs:sequence).
	attvalue :: [attvalue()] | undefined}).

-type 'attvalues-content'() :: #'attvalues-content'{}.


-record(creator, {anyAttribs :: proplist:proplist() | undefined,
	'creator'}).

-type creator() :: #creator{}.


-record(default, {anyAttribs :: proplist:proplist() | undefined,
	'default'}).

-type default() :: #default{}.


-record(description, {anyAttribs :: proplist:proplist() | undefined,
	'description'}).

-type description() :: #description{}.


-record('edge-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% This attribute is required.
	id,
	%% This attribute is optional.
	type,
	%% This attribute is optional.
	label,
	%% This attribute is required.
	source,
	%% This attribute is required.
	target,
	%% This attribute is optional.
	weight,
	choice :: ['attvalues-content'() | 'edge-content/CH4'() | 'spells-content'()] | undefined}).

-type 'edge-content'() :: #'edge-content'{}.


-record('edge-content/CH4', {anyAttribs :: proplist:proplist() | undefined,
	choice :: ['viz:color-content'() | 'viz:edge-shape-content'() | 'viz:thickness-content'()] | undefined}).

-type 'edge-content/CH4'() :: #'edge-content/CH4'{}.


-record('edges-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	count,
	%% Choice (xs:sequence).
	edge :: ['edge-content'()] | undefined}).

-type 'edges-content'() :: #'edges-content'{}.


-record('gexf-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	version,
	%% This attribute is optional.
	variant,
	%% Choice (xs:sequence).
	meta :: ['meta-content'()] | undefined,
	%% Choice (xs:sequence).
	graph :: ['graph-content'()] | undefined}).

-type 'gexf-content'() :: #'gexf-content'{}.


-record('graph-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	timeformat,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% This attribute is optional.
	defaultedgetype,
	%% This attribute is optional.
	idtype,
	%% This attribute is optional.
	mode,
	choice :: ['attributes-content'() | 'graph-content/CH1'()] | undefined}).

-type 'graph-content'() :: #'graph-content'{}.


-record('graph-content/CH1', {anyAttribs :: proplist:proplist() | undefined,
	choice :: ['edges-content'() | 'nodes-content'()] | undefined}).

-type 'graph-content/CH1'() :: #'graph-content/CH1'{}.


-record(keywords, {anyAttribs :: proplist:proplist() | undefined,
	'keywords'}).

-type keywords() :: #keywords{}.


-record('meta-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	lastmodifieddate,
	choice :: ['meta-content-creator'() | 'meta-content-description'() | 'meta-content-keywords'()] | undefined}).

-type 'meta-content'() :: #'meta-content'{}.


-record('meta-content-creator', {anyAttribs :: proplist:proplist() | undefined,
	'creator'}).

-type 'meta-content-creator'() :: #'meta-content-creator'{}.


-record('meta-content-description', {anyAttribs :: proplist:proplist() | undefined,
	'description'}).

-type 'meta-content-description'() :: #'meta-content-description'{}.


-record('meta-content-keywords', {anyAttribs :: proplist:proplist() | undefined,
	'keywords'}).

-type 'meta-content-keywords'() :: #'meta-content-keywords'{}.


-record('node-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% This attribute is optional.
	pid,
	%% This attribute is required.
	id,
	%% This attribute is optional.
	label,
	choice :: ['attvalues-content'() | 'node-content/CH2'() | 'node-content/CH3'() | 'parents-content'() | 'spells-content'()] | undefined}).

-type 'node-content'() :: #'node-content'{}.


-record('node-content/CH2', {anyAttribs :: proplist:proplist() | undefined,
	choice :: ['edges-content'() | 'nodes-content'()] | undefined}).

-type 'node-content/CH2'() :: #'node-content/CH2'{}.


-record('node-content/CH3', {anyAttribs :: proplist:proplist() | undefined,
	choice :: ['viz:color-content'() | 'viz:node-shape-content'() | 'viz:position-content'() | 'viz:size-content'()] | undefined}).

-type 'node-content/CH3'() :: #'node-content/CH3'{}.


-record('nodes-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	count,
	%% Choice (xs:sequence).
	node :: ['node-content'()] | undefined}).

-type 'nodes-content'() :: #'nodes-content'{}.


-record(options, {anyAttribs :: proplist:proplist() | undefined,
	'options'}).

-type options() :: #options{}.


-record(parent, {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	for}).

-type parent() :: #parent{}.


-record('parents-content', {anyAttribs :: proplist:proplist() | undefined,
	%% Choice (xs:sequence).
	parent :: [parent()] | undefined}).

-type 'parents-content'() :: #'parents-content'{}.


-record(spell, {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen}).

-type spell() :: #spell{}.


-record('spells-content', {anyAttribs :: proplist:proplist() | undefined,
	%% Choice (xs:sequence).
	spell :: [spell()] | undefined}).

-type 'spells-content'() :: #'spells-content'{}.


-record('viz:color-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	r,
	%% This attribute is required.
	g,
	%% This attribute is required.
	b,
	%% This attribute is optional.
	a,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% Choice (xs:sequence).
	spells :: ['spells-content'()] | undefined}).

-type 'viz:color-content'() :: #'viz:color-content'{}.


-record('viz:edge-shape-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	value,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% Choice (xs:sequence).
	spells :: ['spells-content'()] | undefined}).

-type 'viz:edge-shape-content'() :: #'viz:edge-shape-content'{}.


-record('viz:node-shape-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	value,
	%% This attribute is optional.
	uri,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% Choice (xs:sequence).
	spells :: ['spells-content'()] | undefined}).

-type 'viz:node-shape-content'() :: #'viz:node-shape-content'{}.


-record('viz:position-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	x,
	%% This attribute is required.
	y,
	%% This attribute is required.
	z,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% Choice (xs:sequence).
	spells :: ['spells-content'()] | undefined}).

-type 'viz:position-content'() :: #'viz:position-content'{}.


-record('viz:size-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	value,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% Choice (xs:sequence).
	spells :: ['spells-content'()] | undefined}).

-type 'viz:size-content'() :: #'viz:size-content'{}.


-record('viz:thickness-content', {anyAttribs :: proplist:proplist() | undefined,
	%% This attribute is required.
	value,
	%% This attribute is optional.
	start,
	%% This attribute is optional.
	startopen,
	%% This attribute is optional.
	'end',
	%% This attribute is optional.
	endopen,
	%% Choice (xs:sequence).
	spells :: ['spells-content'()] | undefined}).

-type 'viz:thickness-content'() :: #'viz:thickness-content'{}.